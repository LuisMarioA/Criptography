
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import leerescribirarchivos.LeerEscribirArchivos;
import static leerescribirarchivos.LeerEscribirArchivos.leerArchivo;
import static leerescribirarchivos.LeerEscribirArchivos.proccesEncrypt;
import static leerescribirarchivos.LeerEscribirArchivos.readPrivateKey;
import static leerescribirarchivos.LeerEscribirArchivos.readPublicKey;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author lm107
 */
public class IU_RSA extends javax.swing.JFrame {

    /**
     * Creates new form IU_RSA
     */
    public IU_RSA() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txtNombreArchivo = new javax.swing.JTextField();
        jButtonSeleccionarArchivo = new javax.swing.JButton();
        jComboBoxStandard = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxOperationMode = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jButtonEncrypt = new javax.swing.JButton();
        jButtonDecrypt = new javax.swing.JButton();
        txtNombrePrivateKey = new javax.swing.JTextField();
        jButtonSelectPublicKey = new javax.swing.JButton();
        jButtonSelectPrivateKey = new javax.swing.JButton();
        txtNombrePublicKey = new javax.swing.JTextField();
        jComboBoxHashFunction = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setText("RSA / DES-AES / MD5-SHA1");

        txtNombreArchivo.setEditable(false);
        txtNombreArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreArchivoActionPerformed(evt);
            }
        });

        jButtonSeleccionarArchivo.setText("Select File");
        jButtonSeleccionarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeleccionarArchivoActionPerformed(evt);
            }
        });

        jComboBoxStandard.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DES", "AES" }));
        jComboBoxStandard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStandardActionPerformed(evt);
            }
        });

        jLabel3.setText("Select Operation mode");

        jComboBoxOperationMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ECB", "OFB", "CBC", "CFB" }));
        jComboBoxOperationMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOperationModeActionPerformed(evt);
            }
        });

        jLabel4.setText("Select Standard");

        jButtonEncrypt.setText("Encrypt");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });

        jButtonDecrypt.setText("Decrypt");
        jButtonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptActionPerformed(evt);
            }
        });

        txtNombrePrivateKey.setEditable(false);
        txtNombrePrivateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombrePrivateKeyActionPerformed(evt);
            }
        });

        jButtonSelectPublicKey.setText("Select Public Key");
        jButtonSelectPublicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectPublicKeyActionPerformed(evt);
            }
        });

        jButtonSelectPrivateKey.setText("Select Private Key");
        jButtonSelectPrivateKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectPrivateKeyActionPerformed(evt);
            }
        });

        txtNombrePublicKey.setEditable(false);
        txtNombrePublicKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombrePublicKeyActionPerformed(evt);
            }
        });

        jComboBoxHashFunction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MD5", "SHA1" }));
        jComboBoxHashFunction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxHashFunctionActionPerformed(evt);
            }
        });

        jLabel5.setText("Select Hash Function");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtNombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSeleccionarArchivo))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtNombrePublicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSelectPublicKey))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(jButtonDecrypt)
                                .addGap(69, 69, 69)
                                .addComponent(jButtonEncrypt))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtNombrePrivateKey, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonSelectPrivateKey))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(18, 18, 18)
                                                .addComponent(jComboBoxHashFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jComboBoxStandard, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addComponent(jLabel3)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jComboBoxOperationMode, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombreArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSeleccionarArchivo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxStandard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxOperationMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxHashFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombrePublicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectPublicKey))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombrePrivateKey, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSelectPrivateKey))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDecrypt)
                    .addComponent(jButtonEncrypt))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreArchivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreArchivoActionPerformed

    private void jButtonSeleccionarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeleccionarArchivoActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("."));
        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION){
            //Crear un objeto File con el archivo elegido
            originalFile = fc.getSelectedFile();
            //Mostrar el nombre del archvivo en un campo de texto
            txtNombreArchivo.setText(originalFile.getName());
        }
    }//GEN-LAST:event_jButtonSeleccionarArchivoActionPerformed

    private void jComboBoxStandardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStandardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxStandardActionPerformed

    private void jComboBoxOperationModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOperationModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxOperationModeActionPerformed

    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptActionPerformed
        String standard=jComboBoxStandard.getSelectedItem().toString();
        String modo=jComboBoxOperationMode.getSelectedItem().toString();
        String hashType=jComboBoxHashFunction.getSelectedItem().toString();
        String privateKeyFilename=txtNombrePrivateKey.getText();
        String publicKeyFilename=txtNombrePublicKey.getText();
        String filename=txtNombreArchivo.getText();
      
        try {
            byte[] privateKeyBytes=leerArchivo(privateKeyFilename);
            PrivateKey privateKey = readPrivateKey(privateKeyBytes);
            byte[] publicKeyBytes=leerArchivo(publicKeyFilename);
            PublicKey publicKey=readPublicKey(publicKeyBytes);
            String rutaArchivo=new File(".").getAbsolutePath();
            if(proccesEncrypt(privateKey,publicKey,rutaArchivo,filename,standard,modo,hashType))    
                JOptionPane.showMessageDialog(this,"Perfect !");
            else
                JOptionPane.showMessageDialog(this,"Something wrong !");
        } catch (IOException ex) {
            Logger.getLogger(IU_RSA.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(IU_RSA.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(IU_RSA.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonEncryptActionPerformed

    private void jButtonDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptActionPerformed
        String standard=jComboBoxStandard.getSelectedItem().toString();
        String modo=jComboBoxOperationMode.getSelectedItem().toString();
        String hashType=jComboBoxHashFunction.getSelectedItem().toString();
        String privateKeyFilename=txtNombrePrivateKey.getText();
        String publicKeyFilename=txtNombrePublicKey.getText();
        String filename=txtNombreArchivo.getText();
        
        try {
            byte[] privateKeyBytes=leerArchivo(privateKeyFilename);
            PrivateKey privateKey = readPrivateKey(privateKeyBytes);
            byte[] publicKeyBytes=leerArchivo(publicKeyFilename);
            PublicKey publicKey=readPublicKey(publicKeyBytes);
            String rutaArchivo=new File(".").getAbsolutePath();
            if(LeerEscribirArchivos.proccesDecrypt(publicKey,privateKey,rutaArchivo,filename,standard,modo,hashType))    
                JOptionPane.showMessageDialog(this,"Perfect !");
            else
                JOptionPane.showMessageDialog(this,"Something wrong !");
        } catch (IOException ex) {
            Logger.getLogger(IU_RSA.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(IU_RSA.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(IU_RSA.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDecryptActionPerformed

    private void txtNombrePrivateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombrePrivateKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombrePrivateKeyActionPerformed

    private void jButtonSelectPublicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectPublicKeyActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("."));
        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION){
            //Crear un objeto File con el archivo elegido
            publicKeyFile = fc.getSelectedFile();
            //Mostrar el nombre del archvivo en un campo de texto
            txtNombrePublicKey.setText(publicKeyFile.getName());
        }
    }//GEN-LAST:event_jButtonSelectPublicKeyActionPerformed

    private void jButtonSelectPrivateKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectPrivateKeyActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("."));
        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION){
            //Crear un objeto File con el archivo elegido
            privateKeyFile = fc.getSelectedFile();
            //Mostrar el nombre del archvivo en un campo de texto
            txtNombrePrivateKey.setText(privateKeyFile.getName());
        }
    }//GEN-LAST:event_jButtonSelectPrivateKeyActionPerformed

    private void txtNombrePublicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombrePublicKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombrePublicKeyActionPerformed

    private void jComboBoxHashFunctionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxHashFunctionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxHashFunctionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IU_RSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IU_RSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IU_RSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IU_RSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IU_RSA().setVisible(true);
            }
        });
    }
    
    //Variables declaradas por el usuario
    LeerEscribirArchivos cipher = new LeerEscribirArchivos();
    File privateKeyFile;
    File publicKeyFile;
    File originalFile;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDecrypt;
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JButton jButtonSeleccionarArchivo;
    private javax.swing.JButton jButtonSelectPrivateKey;
    private javax.swing.JButton jButtonSelectPublicKey;
    private javax.swing.JComboBox<String> jComboBoxHashFunction;
    private javax.swing.JComboBox<String> jComboBoxOperationMode;
    private javax.swing.JComboBox<String> jComboBoxStandard;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtNombreArchivo;
    private javax.swing.JTextField txtNombrePrivateKey;
    private javax.swing.JTextField txtNombrePublicKey;
    // End of variables declaration//GEN-END:variables
}
